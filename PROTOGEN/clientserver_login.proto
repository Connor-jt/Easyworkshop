//import "descriptor.proto";
package steamproto;

option optimize_for = SPEED;
option cc_generic_services = true;
//option (force_php_generation) = true;

// extend .google.protobuf.MessageOptions {
// 	optional int32 msgpool_soft_limit = 50000 [default = 32];
// 	optional int32 msgpool_hard_limit = 50001 [default = 384];
// }

// extend .google.protobuf.FileOptions {
// 	optional bool force_php_generation = 50000 [default = false];
// }

// extend .google.protobuf.FieldOptions {
// 	optional bool php_output_always_number = 50020 [default = false];
// 	optional bool allow_field_named_steam_id = 50024 [default = false];
// }

enum EBanContentCheckResult {
	k_EBanContentCheckResult_NotScanned = 0;
	k_EBanContentCheckResult_Reset = 1;
	k_EBanContentCheckResult_NeedsChecking = 2;
	k_EBanContentCheckResult_VeryUnlikely = 5;
	k_EBanContentCheckResult_Unlikely = 30;
	k_EBanContentCheckResult_Possible = 50;
	k_EBanContentCheckResult_Likely = 75;
	k_EBanContentCheckResult_VeryLikely = 100;
}

enum EProtoClanEventType {
	k_EClanOtherEvent = 1;
	k_EClanGameEvent = 2;
	k_EClanPartyEvent = 3;
	k_EClanMeetingEvent = 4;
	k_EClanSpecialCauseEvent = 5;
	k_EClanMusicAndArtsEvent = 6;
	k_EClanSportsEvent = 7;
	k_EClanTripEvent = 8;
	k_EClanChatEvent = 9;
	k_EClanGameReleaseEvent = 10;
	k_EClanBroadcastEvent = 11;
	k_EClanSmallUpdateEvent = 12;
	k_EClanPreAnnounceMajorUpdateEvent = 13;
	k_EClanMajorUpdateEvent = 14;
	k_EClanDLCReleaseEvent = 15;
	k_EClanFutureReleaseEvent = 16;
	k_EClanESportTournamentStreamEvent = 17;
	k_EClanDevStreamEvent = 18;
	k_EClanFamousStreamEvent = 19;
	k_EClanGameSalesEvent = 20;
	k_EClanGameItemSalesEvent = 21;
	k_EClanInGameBonusXPEvent = 22;
	k_EClanInGameLootEvent = 23;
	k_EClanInGamePerksEvent = 24;
	k_EClanInGameChallengeEvent = 25;
	k_EClanInGameContestEvent = 26;
	k_EClanIRLEvent = 27;
	k_EClanNewsEvent = 28;
	k_EClanBetaReleaseEvent = 29;
	k_EClanInGameContentReleaseEvent = 30;
	k_EClanFreeTrial = 31;
	k_EClanSeasonRelease = 32;
	k_EClanSeasonUpdate = 33;
	k_EClanCrosspostEvent = 34;
	k_EClanInGameEventGeneral = 35;
}

enum PartnerEventNotificationType {
	k_EEventStart = 0;
	k_EEventBroadcastStart = 1;
	k_EEventMatchStart = 2;
	k_EEventPartnerMaxType = 3;
}

message CMsgIPAddress {
	oneof ip {
		fixed32 v4 = 1;
		bytes v6 = 2;
	}
}

message CMsgIPAddressBucket {
	optional .CMsgIPAddress original_ip_address = 1;
	optional fixed64 bucket = 2;
}

message CMsgGCRoutingProtoBufHeader {
	optional uint64 dst_gcid_queue = 1;
	optional uint32 dst_gc_dir_index = 2;
}

message CMsgProtoBufHeader {
	enum ESessionDisposition {
		k_ESessionDispositionNormal = 0;
		k_ESessionDispositionDisconnect = 1;
	}

	optional fixed64 steamid = 1;
	optional int32 client_sessionid = 2;
	optional uint32 routing_appid = 3;
	optional fixed64 jobid_source = 10 [default = 18446744073709551615];
	optional fixed64 jobid_target = 11 [default = 18446744073709551615];
	optional string target_job_name = 12;
	optional int32 seq_num = 24;
	optional int32 eresult = 13 [default = 2];
	optional string error_message = 14;
	optional uint32 auth_account_flags = 16;
	optional uint32 token_source = 22;
	optional bool admin_spoofing_user = 23;
	optional int32 transport_error = 17 [default = 1];
	optional uint64 messageid = 18 [default = 18446744073709551615];
	optional uint32 publisher_group_id = 19;
	optional uint32 sysid = 20;
	optional uint64 trace_tag = 21;
	optional uint32 webapi_key_id = 25;
	optional bool is_from_external_source = 26;
	repeated uint32 forward_to_sysid = 27;
	optional uint32 cm_sysid = 28;
	optional uint32 launcher_type = 31 [default = 0];
	optional uint32 realm = 32 [default = 0];
	optional int32 timeout_ms = 33 [default = -1];
	optional string debug_source = 34;
	optional uint32 debug_source_string_index = 35;
	optional uint64 token_id = 36;
	optional .CMsgGCRoutingProtoBufHeader routing_gc = 37;
	optional .CMsgProtoBufHeader.ESessionDisposition session_disposition = 38 [default = k_ESessionDispositionNormal];
	optional string wg_token = 39;
	optional string webui_auth_key = 40;
	repeated int32 exclude_client_sessionids = 41;

	oneof ip_addr {
		uint32 ip = 15;
		bytes ip_v6 = 29;
	}
}

message CMsgMulti {
	optional uint32 size_unzipped = 1;
	optional bytes message_body = 2;
}

message CMsgProtobufWrapped {
	optional bytes message_body = 1;
}

message CMsgAuthTicket {
	optional uint32 estate = 1;
	optional uint32 eresult = 2 [default = 2];
	optional fixed64 steamid = 3;
	optional fixed64 gameid = 4;
	optional uint32 h_steam_pipe = 5;
	optional uint32 ticket_crc = 6;
	optional bytes ticket = 7;
	optional bytes server_secret = 8;
	optional uint32 ticket_type = 9;
}

message CCDDBAppDetailCommon {
	optional uint32 appid = 1;
	optional string name = 2;
	optional string icon = 3;
	optional bool tool = 6;
	optional bool demo = 7;
	optional bool media = 8;
	optional bool community_visible_stats = 9;
	optional string friendly_name = 10;
	optional string propagation = 11;
	optional bool has_adult_content = 12;
	optional bool is_visible_in_steam_china = 13;
	optional uint32 app_type = 14;
	optional bool has_adult_content_sex = 15;
	optional bool has_adult_content_violence = 16;
	repeated uint32 content_descriptorids = 17;
}

message CMsgAppRights {
	optional bool edit_info = 1;
	optional bool publish = 2;
	optional bool view_error_data = 3;
	optional bool download = 4;
	optional bool upload_cdkeys = 5;
	optional bool generate_cdkeys = 6;
	optional bool view_financials = 7;
	optional bool manage_ceg = 8;
	optional bool manage_signing = 9;
	optional bool manage_cdkeys = 10;
	optional bool edit_marketing = 11;
	optional bool economy_support = 12;
	optional bool economy_support_supervisor = 13;
	optional bool manage_pricing = 14;
	optional bool broadcast_live = 15;
	optional bool view_marketing_traffic = 16;
	optional bool edit_store_display_content = 17;
}

message CCuratorPreferences {
	optional uint32 supported_languages = 1;
	optional bool platform_windows = 2;
	optional bool platform_mac = 3;
	optional bool platform_linux = 4;
	optional bool vr_content = 5;
	optional bool adult_content_violence = 6;
	optional bool adult_content_sex = 7;
	optional uint32 timestamp_updated = 8;
	repeated uint32 tagids_curated = 9;
	repeated uint32 tagids_filtered = 10;
	optional string website_title = 11;
	optional string website_url = 12;
	optional string discussion_url = 13;
	optional bool show_broadcast = 14;
}

message CLocalizationToken {
	optional uint32 language = 1;
	optional string localized_string = 2;
}

message CClanEventUserNewsTuple {
	optional uint32 clanid = 1;
	optional fixed64 event_gid = 2;
	optional fixed64 announcement_gid = 3;
	optional uint32 rtime_start = 4;
	optional uint32 rtime_end = 5;
	optional uint32 priority_score = 6;
	optional uint32 type = 7;
	optional uint32 clamp_range_slot = 8;
	optional uint32 appid = 9;
	optional uint32 rtime32_last_modified = 10;
}

message CClanMatchEventByRange {
	optional uint32 rtime_before = 1;
	optional uint32 rtime_after = 2;
	optional uint32 qualified = 3;
	repeated .CClanEventUserNewsTuple events = 4;
}

message CCommunity_ClanAnnouncementInfo {
	optional uint64 gid = 1;
	optional uint64 clanid = 2;
	optional uint64 posterid = 3;
	optional string headline = 4;
	optional uint32 posttime = 5;
	optional uint32 updatetime = 6;
	optional string body = 7;
	optional int32 commentcount = 8;
	repeated string tags = 9;
	optional int32 language = 10;
	optional bool hidden = 11;
	optional fixed64 forum_topic_id = 12;
	optional fixed64 event_gid = 13;
	optional int32 voteupcount = 14;
	optional int32 votedowncount = 15;
	optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
	optional bool banned = 17;
}

message CClanEventData {
	optional fixed64 gid = 1;
	optional fixed64 clan_steamid = 2;
	optional string event_name = 3;
	optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
	optional uint32 appid = 5;
	optional string server_address = 6;
	optional string server_password = 7;
	optional uint32 rtime32_start_time = 8;
	optional uint32 rtime32_end_time = 9;
	optional int32 comment_count = 10;
	optional fixed64 creator_steamid = 11;
	optional fixed64 last_update_steamid = 12;
	optional string event_notes = 13;
	optional string jsondata = 14;
	optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
	optional bool published = 16;
	optional bool hidden = 17;
	optional uint32 rtime32_visibility_start = 18;
	optional uint32 rtime32_visibility_end = 19;
	optional uint32 broadcaster_accountid = 20;
	optional uint32 follower_count = 21;
	optional uint32 ignore_count = 22;
	optional fixed64 forum_topic_id = 23;
	optional uint32 rtime32_last_modified = 24;
	optional fixed64 news_post_gid = 25;
	optional uint32 rtime_mod_reviewed = 26;
	optional uint32 featured_app_tagid = 27;
	repeated uint32 referenced_appids = 28;
	optional uint32 build_id = 29;
	optional string build_branch = 30;
}

message CBilling_Address {
	optional string first_name = 1;
	optional string last_name = 2;
	optional string address1 = 3;
	optional string address2 = 4;
	optional string city = 5;
	optional string us_state = 6;
	optional string country_code = 7;
	optional string postcode = 8;
	optional int32 zip_plus4 = 9;
	optional string phone = 10;
}

message CPackageReservationStatus {
	optional uint32 packageid = 1;
	optional int32 reservation_state = 2;
	optional int32 queue_position = 3;
	optional int32 total_queue_size = 4;
	optional string reservation_country_code = 5;
	optional bool expired = 6;
	optional uint32 time_expires = 7;
	optional uint32 time_reserved = 8;
	optional uint32 rtime_estimated_notification = 9;
	optional string notificaton_token = 10;
}

message CMsgKeyValuePair {
	optional string name = 1;
	optional string value = 2;
}

message CMsgKeyValueSet {
	repeated .CMsgKeyValuePair pairs = 1;
}

message UserContentDescriptorPreferences {
	message ContentDescriptor {
		optional uint32 content_descriptorid = 1;
		optional uint32 timestamp_added = 2;
	}

	repeated .UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
}


message CMsgClientHeartBeat {
	optional bool send_reply = 1;
}

message CMsgClientServerTimestampRequest {
	optional uint64 client_request_timestamp = 1;
}

message CMsgClientServerTimestampResponse {
	optional uint64 client_request_timestamp = 1;
	optional uint64 server_timestamp_ms = 2;
}

message CMsgClientSecret {
	optional uint32 version = 1;
	optional uint32 appid = 2;
	optional uint32 deviceid = 3;
	optional fixed64 nonce = 4;
	optional bytes hmac = 5;
}

message CMsgClientHello {
	optional uint32 protocol_version = 1;
}

message CMsgClientLogon {
	optional uint32 protocol_version = 1;
	optional uint32 deprecated_obfustucated_private_ip = 2;
	optional uint32 cell_id = 3;
	optional uint32 last_session_id = 4;
	optional uint32 client_package_version = 5;
	optional string client_language = 6;
	optional uint32 client_os_type = 7;
	optional bool should_remember_password = 8 [default = false];
	optional string wine_version = 9;
	optional uint32 deprecated_10 = 10;
	optional .CMsgIPAddress obfuscated_private_ip = 11;
	optional uint32 deprecated_public_ip = 20;
	optional uint32 qos_level = 21;
	optional fixed64 client_supplied_steam_id = 22;
	optional .CMsgIPAddress public_ip = 23;
	optional bytes machine_id = 30;
	optional uint32 launcher_type = 31 [default = 0];
	optional uint32 ui_mode = 32 [default = 0];
	optional uint32 chat_mode = 33 [default = 0];
	optional bytes steam2_auth_ticket = 41;
	optional string email_address = 42;
	optional fixed32 rtime32_account_creation = 43;
	optional string account_name = 50;
	optional string password = 51;
	optional string game_server_token = 52;
	optional string login_key = 60;
	optional bool was_converted_deprecated_msg = 70 [default = false];
	optional string anon_user_target_account_name = 80;
	optional fixed64 resolved_user_steam_id = 81;
	optional int32 eresult_sentryfile = 82;
	optional bytes sha_sentryfile = 83;
	optional string auth_code = 84;
	optional int32 otp_type = 85;
	optional uint32 otp_value = 86;
	optional string otp_identifier = 87;
	optional bool steam2_ticket_request = 88;
	optional bytes sony_psn_ticket = 90;
	optional string sony_psn_service_id = 91;
	optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
	optional string sony_psn_name = 93;
	optional int32 game_server_app_id = 94;
	optional bool steamguard_dont_remember_computer = 95;
	optional string machine_name = 96;
	optional string machine_name_userchosen = 97;
	optional string country_override = 98;
	optional bool is_steam_box = 99;
	optional uint64 client_instance_id = 100;
	optional string two_factor_code = 101;
	optional bool supports_rate_limit_response = 102;
	optional string web_logon_nonce = 103;
	optional int32 priority_reason = 104;
	optional .CMsgClientSecret embedded_client_secret = 105;
	optional bool disable_partner_autogrants = 106;
	optional bool is_steam_deck = 107;
	optional string access_token = 108;
	optional bool is_chrome_os = 109;
	optional bool is_tesla = 110;
}

message CMsgClientLogonResponse {
	optional int32 eresult = 1 [default = 2];
	optional int32 legacy_out_of_game_heartbeat_seconds = 2;
	optional int32 heartbeat_seconds = 3;
	optional uint32 deprecated_public_ip = 4;
	optional fixed32 rtime32_server_time = 5;
	optional uint32 account_flags = 6;
	optional uint32 cell_id = 7;
	optional string email_domain = 8;
	optional bytes steam2_ticket = 9;
	optional int32 eresult_extended = 10;
	optional uint32 cell_id_ping_threshold = 12;
	optional bool deprecated_use_pics = 13;
	optional string vanity_url = 14;
	optional .CMsgIPAddress public_ip = 15;
	optional string user_country = 16;
	optional fixed64 client_supplied_steamid = 20;
	optional string ip_country_code = 21;
	optional bytes parental_settings = 22;
	optional bytes parental_setting_signature = 23;
	optional int32 count_loginfailures_to_migrate = 24;
	optional int32 count_disconnects_to_migrate = 25;
	optional int32 ogs_data_report_time_window = 26;
	optional uint64 client_instance_id = 27;
	optional bool force_client_update_check = 28;
	optional string agreement_session_url = 29;
	optional uint64 token_id = 30;
	optional uint64 family_group_id = 31;
}

message CMsgClientRequestWebAPIAuthenticateUserNonce {
	optional int32 token_type = 1 [default = -1];
}

message CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
	optional int32 eresult = 1 [default = 2];
	optional string webapi_authenticate_user_nonce = 11;
	optional int32 token_type = 3 [default = -1];
}

message CMsgClientLogOff {
}

message CMsgClientLoggedOff {
	optional int32 eresult = 1 [default = 2];
}

message CMsgClientNewLoginKey {
	optional uint32 unique_id = 1;
	optional string login_key = 2;
}

message CMsgClientNewLoginKeyAccepted {
	optional uint32 unique_id = 1;
}

message CMsgClientAccountInfo {
	optional string persona_name = 1;
	optional string ip_country = 2;
	optional int32 count_authed_computers = 5;
	optional uint32 account_flags = 7;
	optional uint64 facebook_id = 8;
	optional string facebook_name = 9;
	optional string steamguard_machine_name_user_chosen = 15;
	optional bool is_phone_verified = 16;
	optional uint32 two_factor_state = 17;
	optional bool is_phone_identifying = 18;
	optional bool is_phone_needing_reverify = 19;
}

message CMsgClientChallengeRequest {
	optional fixed64 steamid = 1;
}

message CMsgClientChallengeResponse {
	optional fixed64 challenge = 1;
}

// START: published files section

// import "steammessages_base.proto";
// import "steammessages_unified_base.steamclient.proto";
// import "enums_productinfo.proto";
// option cc_generic_services = true;

enum EPublishedFileRevision {
	k_EPublishedFileRevision_Default = 0;
	k_EPublishedFileRevision_Latest = 1;
	k_EPublishedFileRevision_ApprovedSnapshot = 2;
	k_EPublishedFileRevision_ApprovedSnapshot_China = 3;
	k_EPublishedFileRevision_RejectedSnapshot = 4;
	k_EPublishedFileRevision_RejectedSnapshot_China = 5;
	k_EPublishedFileRevision_AuthorSnapshot = 6;
}

enum EPublishedFileForSaleStatus {
	k_PFFSS_NotForSale = 0;
	k_PFFSS_PendingApproval = 1;
	k_PFFSS_ApprovedForSale = 2;
	k_PFFSS_RejectedForSale = 3;
	k_PFFSS_NoLongerForSale = 4;
	k_PFFSS_TentativeApproval = 5;
}

message CPublishedFile_Vote_Request {
	optional uint64 publishedfileid = 1;
	optional bool vote_up = 2;
}

message CPublishedFile_Vote_Response {
}

message CPublishedFile_Subscribe_Request {
	optional uint64 publishedfileid = 1;
	optional uint32 list_type = 2;
	optional int32 appid = 3;
	optional bool notify_client = 4;
	optional bool include_dependencies = 5;
}

message CPublishedFile_Subscribe_Response {
}

message CPublishedFile_Unsubscribe_Request {
	optional uint64 publishedfileid = 1;
	optional uint32 list_type = 2;
	optional int32 appid = 3;
	optional bool notify_client = 4;
}

message CPublishedFile_Unsubscribe_Response {
}

message CPublishedFile_CanSubscribe_Request {
	optional uint64 publishedfileid = 1;
}

message CPublishedFile_CanSubscribe_Response {
	optional bool can_subscribe = 1;
}

message CPublishedFile_GetSubSectionData_Request {
	optional uint64 publishedfileid = 1;
	optional bool for_table_of_contents = 2;
	optional uint64 specific_sectionid = 3;
	optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default];
}

message PublishedFileSubSection {
	optional uint64 sectionid = 1;
	optional string title = 2;
	optional string description_text = 3;
	optional uint32 sort_order = 4;
}

message CPublishedFile_GetSubSectionData_Response {
	repeated .PublishedFileSubSection sub_sections = 1;
}

message CPublishedFile_Publish_Request {
	optional uint32 appid = 1;
	optional uint32 consumer_appid = 2;
	optional string cloudfilename = 3;
	optional string preview_cloudfilename = 4;
	optional string title = 5;
	optional string file_description = 6;
	optional uint32 file_type = 7;
	optional string consumer_shortcut_name = 8;
	optional string youtube_username = 9;
	optional string youtube_videoid = 10;
	optional uint32 visibility = 11;
	optional string redirect_uri = 12;
	repeated string tags = 13;
	optional string collection_type = 14;
	optional string game_type = 15;
	optional string url = 16;
}

message CPublishedFile_Publish_Response {
	optional uint64 publishedfileid = 1;
	optional string redirect_uri = 2;
}

message CPublishedFile_GetDetails_Request {
	repeated fixed64 publishedfileids = 1;
	optional bool includetags = 2;
	optional bool includeadditionalpreviews = 3;
	optional bool includechildren = 4;
	optional bool includekvtags = 5;
	optional bool includevotes = 6;
	optional bool short_description = 8;
	optional bool includeforsaledata = 10;
	optional bool includemetadata = 11;
	optional int32 language = 12 [default = 0];
	optional uint32 return_playtime_stats = 13;
	optional uint32 appid = 14;
	optional bool strip_description_bbcode = 15;
	optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default];
	optional bool includereactions = 17 [default = false];
	optional bool admin_query = 18;
}

message PublishedFileAuthorSnapshot {
	optional uint32 timestamp = 1;
	optional string game_branch_min = 2;
	optional string game_branch_max = 3;
	optional fixed64 manifestid = 4;
}
enum EContentDescriptorID {
	k_EContentDescriptor_NudityOrSexualContent = 1;
	k_EContentDescriptor_FrequentViolenceOrGore = 2;
	k_EContentDescriptor_AdultOnlySexualContent = 3;
	k_EContentDescriptor_GratuitousSexualContent = 4;
	k_EContentDescriptor_AnyMatureContent = 5;
	k_EContentDescriptorMAX = 6;
}

message PublishedFileDetails {
	message Tag {
		optional string tag = 1;
		optional bool adminonly = 2;
		optional string display_name = 3;
	}

	message Preview {
		optional uint64 previewid = 1;
		optional uint32 sortorder = 2;
		optional string url = 3;
		optional uint32 size = 4;
		optional string filename = 5;
		optional string youtubevideoid = 6;
		optional uint32 preview_type = 7;
		optional string external_reference = 8;
	}

	message Child {
		optional uint64 publishedfileid = 1;
		optional uint32 sortorder = 2;
		optional uint32 file_type = 3;
	}

	message KVTag {
		optional string key = 1;
		optional string value = 2;
	}

	message VoteData {
		optional float score = 1;
		optional uint32 votes_up = 2;
		optional uint32 votes_down = 3;
	}

	message ForSaleData {
		optional bool is_for_sale = 1;
		optional uint32 price_category = 2;
		optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
		optional uint32 price_category_floor = 4;
		optional bool price_is_pay_what_you_want = 5;
		optional uint32 discount_percentage = 6;
	}

	message PlaytimeStats {
		optional uint64 playtime_seconds = 1;
		optional uint64 num_sessions = 2;
	}

	message Reaction {
		optional uint32 reactionid = 1;
		optional uint32 count = 2;
	}

	optional uint32 result = 1;
	optional uint64 publishedfileid = 2;
	optional fixed64 creator = 3;
	optional uint32 creator_appid = 4;
	optional uint32 consumer_appid = 5;
	optional uint32 consumer_shortcutid = 6;
	optional string filename = 7;
	optional uint64 file_size = 8;
	optional uint64 preview_file_size = 9;
	optional string file_url = 10;
	optional string preview_url = 11;
	optional string youtubevideoid = 12;
	optional string url = 13;
	optional fixed64 hcontent_file = 14;
	optional fixed64 hcontent_preview = 15;
	optional string title = 16;
	optional string file_description = 17;
	optional string short_description = 18;
	optional uint32 time_created = 19;
	optional uint32 time_updated = 20;
	optional uint32 visibility = 21;
	optional uint32 flags = 22;
	optional bool workshop_file = 23;
	optional bool workshop_accepted = 24;
	optional bool show_subscribe_all = 25;
	optional int32 num_comments_developer = 26;
	optional int32 num_comments_public = 27;
	optional bool banned = 28;
	optional string ban_reason = 29;
	optional fixed64 banner = 30;
	optional bool can_be_deleted = 31;
	optional bool incompatible = 32;
	optional string app_name = 33;
	optional uint32 file_type = 34;
	optional bool can_subscribe = 35;
	optional uint32 subscriptions = 36;
	optional uint32 favorited = 37;
	optional uint32 followers = 38;
	optional uint32 lifetime_subscriptions = 39;
	optional uint32 lifetime_favorited = 40;
	optional uint32 lifetime_followers = 41;
	optional uint64 lifetime_playtime = 62;
	optional uint64 lifetime_playtime_sessions = 63;
	optional uint32 views = 42;
	optional uint32 image_width = 43;
	optional uint32 image_height = 44;
	optional string image_url = 45;
	optional bool spoiler_tag = 46;
	optional uint32 shortcutid = 47;
	optional string shortcutname = 48;
	optional uint32 num_children = 49;
	optional uint32 num_reports = 50;
	repeated .PublishedFileDetails.Preview previews = 51;
	repeated .PublishedFileDetails.Tag tags = 52;
	repeated .PublishedFileDetails.Child children = 53;
	repeated .PublishedFileDetails.KVTag kvtags = 54;
	optional .PublishedFileDetails.VoteData vote_data = 55;
	optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
	optional uint32 time_subscribed = 56;
	optional .PublishedFileDetails.ForSaleData for_sale_data = 57;
	optional string metadata = 58;
	optional int32 language = 61 [default = 0];
	optional bool maybe_inappropriate_sex = 65;
	optional bool maybe_inappropriate_violence = 66;
	repeated .EContentDescriptorID content_descriptorids = 72;
	optional uint64 revision_change_number = 67;
	optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default];
	repeated .EPublishedFileRevision available_revisions = 69;
	repeated .PublishedFileDetails.Reaction reactions = 70;
	optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
	optional float search_score = 73;
	optional uint64 external_asset_id = 74;
	repeated .PublishedFileAuthorSnapshot author_snapshots = 75;
}

message CPublishedFile_GetDetails_Response {
	repeated .PublishedFileDetails publishedfiledetails = 1;
}

message CPublishedFile_GetItemInfo_Request {
	message WorkshopItem {
		optional fixed64 published_file_id = 1;
		optional uint32 time_updated = 2;
		optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default];
	}

	optional uint32 appid = 1;
	optional uint32 last_time_updated = 2;
	repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
}

message CPublishedFile_GetItemInfo_Response {
	message WorkshopItemInfo {
		optional fixed64 published_file_id = 1;
		optional uint32 time_updated = 2;
		optional fixed64 manifest_id = 3;
		optional uint32 flags = 4;
		optional .EPublishedFileRevision revision = 5 [default = k_EPublishedFileRevision_Default];
		repeated .PublishedFileAuthorSnapshot author_snapshots = 6;
	}

	optional uint32 update_time = 1;
	repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
	repeated fixed64 private_items = 3;
}

message CPublishedFile_GetUserFiles_Request {
	message KVTag {
		optional string key = 1;
		optional string value = 2;
	}

	message TagGroup {
		repeated string tags = 1;
	}

	optional fixed64 steamid = 1;
	optional uint32 appid = 2;
	optional uint32 shortcutid = 3;
	optional uint32 page = 4 [default = 1];
	optional uint32 numperpage = 5 [default = 1];
	optional string type = 6 [default = "myfiles"];
	optional string sortmethod = 7 [default = "lastupdated"];
	optional uint32 privacy = 9;
	repeated string requiredtags = 10;
	repeated string excludedtags = 11;
	repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30;
	optional uint32 filetype = 14;
	optional uint32 creator_appid = 15;
	optional string match_cloud_filename = 16;
	optional uint32 cache_max_age_seconds = 27 [default = 0];
	optional int32 language = 29 [default = 0];
	repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34;
	repeated .EContentDescriptorID excluded_content_descriptors = 37;
	optional bool admin_query = 38;
	optional bool totalonly = 17;
	optional bool ids_only = 18;
	optional bool return_vote_data = 19 [default = true];
	optional bool return_tags = 20;
	optional bool return_kv_tags = 21 [default = true];
	optional bool return_previews = 22;
	optional bool return_children = 23;
	optional bool return_short_description = 24 [default = true];
	optional bool return_for_sale_data = 26;
	optional bool return_metadata = 28 [default = false];
	optional uint32 return_playtime_stats = 31;
	optional bool strip_description_bbcode = 32;
	optional bool return_reactions = 35 [default = false];
	optional uint32 startindex_override = 25;
	optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default];
	optional bool return_apps = 36;
}

message CPublishedFile_GetUserFiles_Response {
	message App {
		optional uint32 appid = 1;
		optional string name = 2;
		optional uint32 shortcutid = 3;
		optional bool private = 4;
	}

	optional uint32 total = 1;
	optional uint32 startindex = 2;
	repeated .PublishedFileDetails publishedfiledetails = 3;
	repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
}

message CPublishedFile_AreFilesInSubscriptionList_Request {
	optional uint32 appid = 1;
	repeated fixed64 publishedfileids = 2;
	optional uint32 listtype = 3;
	optional uint32 filetype = 4;
	optional uint32 workshopfiletype = 5;
}

message CPublishedFile_AreFilesInSubscriptionList_Response {
	message InList {
		optional fixed64 publishedfileid = 1;
		optional bool inlist = 2;
	}

	repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
}

message CPublishedFile_Update_Request {
	optional uint32 appid = 1;
	optional fixed64 publishedfileid = 2;
	optional string title = 3;
	optional string file_description = 4;
	optional uint32 visibility = 5;
	repeated string tags = 6;
	optional string filename = 7;
	optional string preview_filename = 8;
	optional bool spoiler_tag = 10;
	optional uint32 image_width = 15;
	optional uint32 image_height = 16;
	optional int32 language = 17;
}

message CPublishedFile_Update_Response {
}

message CPublishedFile_Delete_Request {
	optional fixed64 publishedfileid = 1;
	optional uint32 appid = 5;
}

message CPublishedFile_Delete_Response {
}

message CPublishedFile_GetChangeHistoryEntry_Request {
	optional fixed64 publishedfileid = 1;
	optional uint32 timestamp = 2;
	optional int32 language = 3;
}

message CPublishedFile_GetChangeHistoryEntry_Response {
	optional string change_description = 1;
	optional int32 language = 2;
	optional bool saved_snapshot = 3;
	optional string snapshot_game_branch_min = 4;
	optional string snapshot_game_branch_max = 5;
	optional fixed64 manifest_id = 6;
}

message CPublishedFile_GetChangeHistory_Request {
	optional fixed64 publishedfileid = 1;
	optional bool total_only = 2;
	optional uint32 startindex = 3;
	optional uint32 count = 4;
	optional int32 language = 5 [default = 0];
}

message CPublishedFile_GetChangeHistory_Response {
	message ChangeLog {
		optional uint32 timestamp = 1;
		optional string change_description = 2;
		optional int32 language = 3;
		optional bool saved_snapshot = 4;
		optional string snapshot_game_branch_min = 5;
		optional string snapshot_game_branch_max = 6;
		optional fixed64 manifest_id = 7;
	}

	repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
	optional uint32 total = 2;
}

message CPublishedFile_RefreshVotingQueue_Request {
	optional uint32 appid = 1;
	optional uint32 matching_file_type = 2;
	repeated string tags = 3;
	optional bool match_all_tags = 4 [default = true];
	repeated string excluded_tags = 5;
	optional uint32 desired_queue_size = 6;
	optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default];
}

message CPublishedFile_RefreshVotingQueue_Response {
}

message CPublishedFile_QueryFiles_Request {
	message KVTag {
		optional string key = 1;
		optional string value = 2;
	}

	message TagGroup {
		repeated string tags = 1;
	}

	message DateRange {
		optional uint32 timestamp_start = 1;
		optional uint32 timestamp_end = 2;
	}

	optional uint32 query_type = 1;
	optional uint32 page = 2;
	optional string cursor = 39;
	optional uint32 numperpage = 3 [default = 1];
	optional uint32 creator_appid = 4;
	optional uint32 appid = 5;
	repeated string requiredtags = 6;
	repeated string excludedtags = 7;
	optional bool match_all_tags = 8 [default = true];
	repeated string required_flags = 9;
	repeated string omitted_flags = 10;
	optional string search_text = 11;
	optional uint32 filetype = 12;
	optional fixed64 child_publishedfileid = 13;
	optional uint32 days = 14;
	optional bool include_recent_votes_only = 15;
	optional uint32 cache_max_age_seconds = 31 [default = 0];
	optional int32 language = 33 [default = 0];
	repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34;
	repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42;
	optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44;
	optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45;
	repeated .EContentDescriptorID excluded_content_descriptors = 46;
	optional bool admin_query = 47;
	optional bool totalonly = 16;
	optional bool ids_only = 35;
	optional bool return_vote_data = 17;
	optional bool return_tags = 18;
	optional bool return_kv_tags = 19;
	optional bool return_previews = 20;
	optional bool return_children = 21;
	optional bool return_short_description = 22;
	optional bool return_for_sale_data = 30;
	optional bool return_metadata = 32 [default = false];
	optional uint32 return_playtime_stats = 36;
	optional bool return_details = 37;
	optional bool strip_description_bbcode = 38;
	optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default];
	optional bool return_reactions = 43 [default = false];
}

message CPublishedFile_QueryFiles_Response {
	optional uint32 total = 1;
	repeated .PublishedFileDetails publishedfiledetails = 2;
	optional string next_cursor = 3;
}

message CPublishedFile_AddAppRelationship_Request {
	optional uint64 publishedfileid = 1;
	optional uint32 appid = 2;
	optional uint32 relationship = 3;
}

message CPublishedFile_AddAppRelationship_Response {
}

message CPublishedFile_RemoveAppRelationship_Request {
	optional uint64 publishedfileid = 1;
	optional uint32 appid = 2;
	optional uint32 relationship = 3;
}

message CPublishedFile_RemoveAppRelationship_Response {
}

message CPublishedFile_GetAppRelationships_Request {
	optional uint64 publishedfileid = 1;
}

message CPublishedFile_GetAppRelationships_Response {
	message AppRelationship {
		optional uint32 appid = 1;
		optional uint32 relationship = 2;
	}

	repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
}

message CPublishedFile_GetAppRelationshipsBatched_Request {
	repeated uint64 publishedfileids = 1;
	optional uint32 filter_relationship = 2;
}

message CPublishedFile_GetAppRelationshipsBatched_Response {
	message AppRelationship {
		optional uint32 appid = 1;
		optional uint32 relationship = 2;
	}

	message PublishedFileAppRelationship {
		optional uint64 publishedfileid = 1;
		optional uint32 result = 2;
		repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
	}

	repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
}

message CPublishedFile_StartPlaytimeTracking_Request {
	optional uint32 appid = 1;
	repeated uint64 publishedfileids = 2;
}

message CPublishedFile_StartPlaytimeTracking_Response {
}

message CPublishedFile_StopPlaytimeTracking_Request {
	optional uint32 appid = 1;
	repeated uint64 publishedfileids = 2;
}

message CPublishedFile_StopPlaytimeTracking_Response {
}

message CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request {
	optional uint32 appid = 1;
}

message CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response {
}

message CPublishedFile_SetPlaytimeForControllerConfigs_Request {
	message ControllerConfigUsage {
		optional uint64 publishedfileid = 1;
		optional float seconds_active = 2;
	}

	optional uint32 appid = 1;
	repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
}

message CPublishedFile_SetPlaytimeForControllerConfigs_Response {
}

message CPublishedFile_AddChild_Request {
	optional uint64 publishedfileid = 1;
	optional uint64 child_publishedfileid = 2;
}

message CPublishedFile_AddChild_Response {
}

message CPublishedFile_RemoveChild_Request {
	optional uint64 publishedfileid = 1;
	optional uint64 child_publishedfileid = 2;
}

message CPublishedFile_RemoveChild_Response {
}

message CPublishedFile_SetCollectionChildren_Request {
	optional uint32 appid = 1;
	optional uint64 publishedfileid = 2;
	repeated uint64 children = 3;
}

message CPublishedFile_SetCollectionChildren_Response {
}

message CPublishedFile_SetSubscriptionListFromCollection_Request {
	optional uint32 appid = 1;
	optional uint32 list_type = 2;
	optional uint64 publishedfileid = 3;
	optional bool add_only = 4;
}

message CPublishedFile_SetSubscriptionListFromCollection_Response {
}

message CPublishedFile_GetUserVoteSummary_Request {
	repeated fixed64 publishedfileids = 1;
}

message CPublishedFile_GetUserVoteSummary_Response {
	message VoteSummary {
		optional fixed64 publishedfileid = 1;
		optional bool vote_for = 2;
		optional bool vote_against = 3;
		optional bool reported = 4;
	}

	repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
}

message CPublishedFile_GetItemChanges_Request {
	optional uint32 appid = 1;
	optional uint32 last_time_updated = 2;
	optional uint32 num_items_max = 3;
	optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default];
}

message CPublishedFile_GetItemChanges_Response {
	message WorkshopItemInfo {
		optional fixed64 published_file_id = 1;
		optional uint32 time_updated = 2;
		optional fixed64 manifest_id = 3;
		repeated .PublishedFileAuthorSnapshot author_snapshots = 4;
	}

	optional uint32 update_time = 1;
	repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
}

message CPublishedFile_GetContentDescriptors_Request {
	optional fixed64 publishedfileid = 1;
}

message CPublishedFile_GetContentDescriptors_Response {
	message ContentDescriptor {
		optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
		optional uint32 accountid = 2;
		optional uint32 timestamp = 3;
		optional bool moderator_set = 4;
	}

	repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
}

message CPublishedFile_UpdateContentDescriptors_Request {
	optional fixed64 publishedfileid = 1;
	repeated .EContentDescriptorID descriptors_to_add = 2;
	repeated .EContentDescriptorID descriptors_to_remove = 3;
}

message CPublishedFile_UpdateContentDescriptors_Response {
	optional uint32 timestamp_updated = 1;
}

message CPublishedFile_FileSubscribed_Notification {
	message RevisionData {
		optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
		optional fixed64 file_hcontent = 2;
		optional uint32 rtime_updated = 3;
		optional string game_branch_min = 4;
		optional string game_branch_max = 5;
	}

	optional fixed64 published_file_id = 1;
	optional uint32 app_id = 2;
	optional fixed64 file_hcontent = 3;
	optional uint32 file_size = 4;
	optional uint32 rtime_subscribed = 5;
	optional bool is_depot_content = 6;
	optional uint32 rtime_updated = 7;
	optional .EPublishedFileRevision revision = 9 [default = k_EPublishedFileRevision_Default];
	repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8;
}

message CPublishedFile_FileUnsubscribed_Notification {
	optional fixed64 published_file_id = 1;
	optional uint32 app_id = 2;
}

message CPublishedFile_FileDeleted_Client_Notification {
	optional fixed64 published_file_id = 1;
	optional uint32 app_id = 2;
}

// service PublishedFile {
// 	rpc Vote (.CPublishedFile_Vote_Request) returns (.CPublishedFile_Vote_Response);
// 	rpc Subscribe (.CPublishedFile_Subscribe_Request) returns (.CPublishedFile_Subscribe_Response);
// 	rpc Unsubscribe (.CPublishedFile_Unsubscribe_Request) returns (.CPublishedFile_Unsubscribe_Response);
// 	rpc CanSubscribe (.CPublishedFile_CanSubscribe_Request) returns (.CPublishedFile_CanSubscribe_Response);
// 	rpc GetSubSectionData (.CPublishedFile_GetSubSectionData_Request) returns (.CPublishedFile_GetSubSectionData_Response);
// 	rpc Publish (.CPublishedFile_Publish_Request) returns (.CPublishedFile_Publish_Response);
// 	rpc GetDetails (.CPublishedFile_GetDetails_Request) returns (.CPublishedFile_GetDetails_Response);
// 	rpc GetItemInfo (.CPublishedFile_GetItemInfo_Request) returns (.CPublishedFile_GetItemInfo_Response);
// 	rpc GetUserFiles (.CPublishedFile_GetUserFiles_Request) returns (.CPublishedFile_GetUserFiles_Response);
// 	rpc GetUserFileCount (.CPublishedFile_GetUserFiles_Request) returns (.CPublishedFile_GetUserFiles_Response);
// 	rpc AreFilesInSubscriptionList (.CPublishedFile_AreFilesInSubscriptionList_Request) returns (.CPublishedFile_AreFilesInSubscriptionList_Response);
// 	rpc Update (.CPublishedFile_Update_Request) returns (.CPublishedFile_Update_Response);
// 	rpc Delete (.CPublishedFile_Delete_Request) returns (.CPublishedFile_Delete_Response);
// 	rpc GetChangeHistoryEntry (.CPublishedFile_GetChangeHistoryEntry_Request) returns (.CPublishedFile_GetChangeHistoryEntry_Response);
// 	rpc GetChangeHistory (.CPublishedFile_GetChangeHistory_Request) returns (.CPublishedFile_GetChangeHistory_Response);
// 	rpc RefreshVotingQueue (.CPublishedFile_RefreshVotingQueue_Request) returns (.CPublishedFile_RefreshVotingQueue_Response);
// 	rpc QueryFiles (.CPublishedFile_QueryFiles_Request) returns (.CPublishedFile_QueryFiles_Response);
// 	rpc AddAppRelationship (.CPublishedFile_AddAppRelationship_Request) returns (.CPublishedFile_AddAppRelationship_Response);
// 	rpc RemoveAppRelationship (.CPublishedFile_RemoveAppRelationship_Request) returns (.CPublishedFile_RemoveAppRelationship_Response);
// 	rpc GetAppRelationships (.CPublishedFile_GetAppRelationships_Request) returns (.CPublishedFile_GetAppRelationships_Response);
// 	rpc GetAppRelationshipsBatched (.CPublishedFile_GetAppRelationshipsBatched_Request) returns (.CPublishedFile_GetAppRelationshipsBatched_Response);
// 	rpc StartPlaytimeTracking (.CPublishedFile_StartPlaytimeTracking_Request) returns (.CPublishedFile_StartPlaytimeTracking_Response);
// 	rpc StopPlaytimeTracking (.CPublishedFile_StopPlaytimeTracking_Request) returns (.CPublishedFile_StopPlaytimeTracking_Response);
// 	rpc StopPlaytimeTrackingForAllAppItems (.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) returns (.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response);
// 	rpc SetPlaytimeForControllerConfigs (.CPublishedFile_SetPlaytimeForControllerConfigs_Request) returns (.CPublishedFile_SetPlaytimeForControllerConfigs_Response);
// 	rpc AddChild (.CPublishedFile_AddChild_Request) returns (.CPublishedFile_AddChild_Response);
// 	rpc RemoveChild (.CPublishedFile_RemoveChild_Request) returns (.CPublishedFile_RemoveChild_Response);
// 	rpc SetCollectionChildren (.CPublishedFile_SetCollectionChildren_Request) returns (.CPublishedFile_SetCollectionChildren_Response);
// 	rpc SetSubscriptionListFromCollection (.CPublishedFile_SetSubscriptionListFromCollection_Request) returns (.CPublishedFile_SetSubscriptionListFromCollection_Response);
// 	rpc GetUserVoteSummary (.CPublishedFile_GetUserVoteSummary_Request) returns (.CPublishedFile_GetUserVoteSummary_Response);
// 	rpc GetItemChanges (.CPublishedFile_GetItemChanges_Request) returns (.CPublishedFile_GetItemChanges_Response);
// 	rpc GetContentDescriptors (.CPublishedFile_GetContentDescriptors_Request) returns (.CPublishedFile_GetContentDescriptors_Response);
// 	rpc UpdateContentDescriptors (.CPublishedFile_UpdateContentDescriptors_Request) returns (.CPublishedFile_UpdateContentDescriptors_Response);
// }

// service PublishedFileClient {
// 	option (service_execution_site) = k_EProtoExecutionSiteSteamClient;

// 	rpc NotifyFileSubscribed (.CPublishedFile_FileSubscribed_Notification) returns (.NoResponse);
// 	rpc NotifyFileUnsubscribed (.CPublishedFile_FileUnsubscribed_Notification) returns (.NoResponse);
// 	rpc NotifyFileDeleted (.CPublishedFile_FileDeleted_Client_Notification) returns (.NoResponse);
// }